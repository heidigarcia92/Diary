//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxcrafter.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxcrafter.h"


// Declare the bitmap loading function
extern void wxC9ED9InitBitmapResources();

static bool bBitmapLoaded = false;


MainFrameBaseClass::MainFrameBaseClass(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    m_menuBar = new wxMenuBar(0);
    this->SetMenuBar(m_menuBar);
    
    m_name6 = new wxMenu();
    m_menuBar->Append(m_name6, _("File"));
    
    m_menuItem7 = new wxMenuItem(m_name6, wxID_EXIT, _("Exit\tAlt-X"), _("Quit"), wxITEM_NORMAL);
    m_name6->Append(m_menuItem7);
    
    m_name8 = new wxMenu();
    m_menuBar->Append(m_name8, _("Help"));
    
    m_menuItem9 = new wxMenuItem(m_name8, wxID_ABOUT, _("About..."), wxT(""), wxITEM_NORMAL);
    m_name8->Append(m_menuItem9);
    
    wxFlexGridSizer* flexGridSizer17 = new wxFlexGridSizer(5, 3, 0, 0);
    flexGridSizer17->SetFlexibleDirection( wxBOTH );
    flexGridSizer17->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer17->AddGrowableCol(0);
    flexGridSizer17->AddGrowableCol(1);
    flexGridSizer17->AddGrowableCol(2);
    flexGridSizer17->AddGrowableRow(2);
    this->SetSizer(flexGridSizer17);
    
    wxFlexGridSizer* flexGridSizer35 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer35->SetFlexibleDirection( wxBOTH );
    flexGridSizer35->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer17->Add(flexGridSizer35, 1, wxALL|wxEXPAND|wxALIGN_LEFT, WXC_FROM_DIP(5));
    
    button_addBoard = new wxButton(this, wxID_ANY, _("Aggungi Lista Attività..."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer35->Add(button_addBoard, 0, wxLEFT|wxRIGHT|wxALIGN_LEFT, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer33 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer33->SetFlexibleDirection( wxBOTH );
    flexGridSizer33->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer17->Add(flexGridSizer33, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer95 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer95->SetFlexibleDirection( wxBOTH );
    flexGridSizer95->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer17->Add(flexGridSizer95, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    text1 = new wxStaticText(this, wxID_ANY, _("To do"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer17->Add(text1, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    text2 = new wxStaticText(this, wxID_ANY, _("To do"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer17->Add(text2, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    text3 = new wxStaticText(this, wxID_ANY, _("To do"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer17->Add(text3, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    list1 = new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLC_REPORT);
    
    flexGridSizer17->Add(list1, 1, wxALL|wxEXPAND|wxALIGN_LEFT, WXC_FROM_DIP(5));
    
    list1->InsertColumn(list1->GetColumnCount(), _("Titolo"), wxLIST_FORMAT_LEFT, -1);
    list1->InsertColumn(list1->GetColumnCount(), _("Scadenza"), wxLIST_FORMAT_LEFT, -1);
    list1->InsertColumn(list1->GetColumnCount(), _("Descrizione"), wxLIST_FORMAT_LEFT, -1);
    list2 = new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLC_REPORT);
    
    flexGridSizer17->Add(list2, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    list2->InsertColumn(list2->GetColumnCount(), _("Titolo"), wxLIST_FORMAT_LEFT, -1);
    list2->InsertColumn(list2->GetColumnCount(), _("Scadenza"), wxLIST_FORMAT_LEFT, -1);
    list2->InsertColumn(list2->GetColumnCount(), _("Descrizione"), wxLIST_FORMAT_LEFT, -1);
    list3 = new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLC_REPORT);
    
    flexGridSizer17->Add(list3, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    list3->InsertColumn(list3->GetColumnCount(), _("Titolo"), wxLIST_FORMAT_LEFT, -1);
    list3->InsertColumn(list3->GetColumnCount(), _("Scadenza"), wxLIST_FORMAT_LEFT, -1);
    list3->InsertColumn(list3->GetColumnCount(), _("Descrizione"), wxLIST_FORMAT_LEFT, -1);
    wxFlexGridSizer* flexGridSizer77 = new wxFlexGridSizer(0, 3, 0, 0);
    flexGridSizer77->SetFlexibleDirection( wxBOTH );
    flexGridSizer77->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer17->Add(flexGridSizer77, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    button_rename1 = new wxButton(this, wxID_ANY, _("Rinomina lista..."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer77->Add(button_rename1, 0, wxALL, WXC_FROM_DIP(5));
    
    button_add1 = new wxButton(this, wxID_ANY, _("Aggiungi attività..."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer77->Add(button_add1, 0, wxALL, WXC_FROM_DIP(5));
    
    button_delete1 = new wxButton(this, wxID_ANY, _("Elimina attività"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    button_delete1->Enable(false);
    
    flexGridSizer77->Add(button_delete1, 0, wxALL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer79 = new wxFlexGridSizer(0, 3, 0, 0);
    flexGridSizer79->SetFlexibleDirection( wxBOTH );
    flexGridSizer79->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer17->Add(flexGridSizer79, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    button_rename2 = new wxButton(this, wxID_ANY, _("Rinomina lista..."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer79->Add(button_rename2, 0, wxALL, WXC_FROM_DIP(5));
    
    button_add2 = new wxButton(this, wxID_ANY, _("Aggiungi attività..."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer79->Add(button_add2, 0, wxALL, WXC_FROM_DIP(5));
    
    button_delete2 = new wxButton(this, wxID_ANY, _("Elimina attività"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    button_delete2->Enable(false);
    
    flexGridSizer79->Add(button_delete2, 0, wxALL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer81 = new wxFlexGridSizer(0, 3, 0, 0);
    flexGridSizer81->SetFlexibleDirection( wxBOTH );
    flexGridSizer81->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer17->Add(flexGridSizer81, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    button_rename3 = new wxButton(this, wxID_ANY, _("Rinomina lista..."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer81->Add(button_rename3, 0, wxALL, WXC_FROM_DIP(5));
    
    button_add3 = new wxButton(this, wxID_ANY, _("Aggiungi attività..."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer81->Add(button_add3, 0, wxALL, WXC_FROM_DIP(5));
    
    button_delete3 = new wxButton(this, wxID_ANY, _("Elimina attività"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    button_delete3->Enable(false);
    
    flexGridSizer81->Add(button_delete3, 0, wxALL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer97 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer97->SetFlexibleDirection( wxBOTH );
    flexGridSizer97->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer17->Add(flexGridSizer97, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer99 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer99->SetFlexibleDirection( wxBOTH );
    flexGridSizer99->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer17->Add(flexGridSizer99, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer29 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer29->SetFlexibleDirection( wxBOTH );
    flexGridSizer29->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer17->Add(flexGridSizer29, 1, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    button_back = new wxButton(this, wxID_ANY, _("Indietro"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer29->Add(button_back, 0, wxALL, WXC_FROM_DIP(5));
    
    button_forward = new wxButton(this, wxID_ANY, _("Avanti"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer29->Add(button_forward, 0, wxALL, WXC_FROM_DIP(5));
    
    SetName(wxT("MainFrameBaseClass"));
    SetSize(wxDLG_UNIT(this, wxSize(-1,-1)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    this->Connect(m_menuItem7->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnExit), NULL, this);
    this->Connect(m_menuItem9->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnAbout), NULL, this);
    button_addBoard->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnButton_addboardButtonClicked), NULL, this);
    list1->Connect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(MainFrameBaseClass::OnList1ListItemActivated), NULL, this);
    list1->Connect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(MainFrameBaseClass::OnList1ListItemSelected), NULL, this);
    list1->Connect(wxEVT_COMMAND_LIST_BEGIN_DRAG, wxListEventHandler(MainFrameBaseClass::OnList1ListBeginDrag), NULL, this);
    list2->Connect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(MainFrameBaseClass::OnList2ListItemActivated), NULL, this);
    list2->Connect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(MainFrameBaseClass::OnList2ListItemSelected), NULL, this);
    list2->Connect(wxEVT_COMMAND_LIST_BEGIN_DRAG, wxListEventHandler(MainFrameBaseClass::OnList2ListBeginDrag), NULL, this);
    list3->Connect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(MainFrameBaseClass::OnList3ListItemActivated), NULL, this);
    list3->Connect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(MainFrameBaseClass::OnList3ListItemSelected), NULL, this);
    list3->Connect(wxEVT_COMMAND_LIST_BEGIN_DRAG, wxListEventHandler(MainFrameBaseClass::OnList3ListBeginDrag), NULL, this);
    button_rename1->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnButton_rename1ButtonClicked), NULL, this);
    button_add1->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnButton_add1ButtonClicked), NULL, this);
    button_delete1->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnButton_delete1ButtonClicked), NULL, this);
    button_rename2->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnButton_rename2ButtonClicked), NULL, this);
    button_add2->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnButton_add2ButtonClicked), NULL, this);
    button_delete2->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnButton_delete2ButtonClicked), NULL, this);
    button_rename3->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnButton_rename3ButtonClicked), NULL, this);
    button_add3->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnButton_add3ButtonClicked), NULL, this);
    button_delete3->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnButton_delete3ButtonClicked), NULL, this);
    button_back->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnButton_backButtonClicked), NULL, this);
    button_forward->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnButton_forwardButtonClicked), NULL, this);
    
}

MainFrameBaseClass::~MainFrameBaseClass()
{
    this->Disconnect(m_menuItem7->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnExit), NULL, this);
    this->Disconnect(m_menuItem9->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnAbout), NULL, this);
    button_addBoard->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnButton_addboardButtonClicked), NULL, this);
    list1->Disconnect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(MainFrameBaseClass::OnList1ListItemActivated), NULL, this);
    list1->Disconnect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(MainFrameBaseClass::OnList1ListItemSelected), NULL, this);
    list1->Disconnect(wxEVT_COMMAND_LIST_BEGIN_DRAG, wxListEventHandler(MainFrameBaseClass::OnList1ListBeginDrag), NULL, this);
    list2->Disconnect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(MainFrameBaseClass::OnList2ListItemActivated), NULL, this);
    list2->Disconnect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(MainFrameBaseClass::OnList2ListItemSelected), NULL, this);
    list2->Disconnect(wxEVT_COMMAND_LIST_BEGIN_DRAG, wxListEventHandler(MainFrameBaseClass::OnList2ListBeginDrag), NULL, this);
    list3->Disconnect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(MainFrameBaseClass::OnList3ListItemActivated), NULL, this);
    list3->Disconnect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(MainFrameBaseClass::OnList3ListItemSelected), NULL, this);
    list3->Disconnect(wxEVT_COMMAND_LIST_BEGIN_DRAG, wxListEventHandler(MainFrameBaseClass::OnList3ListBeginDrag), NULL, this);
    button_rename1->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnButton_rename1ButtonClicked), NULL, this);
    button_add1->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnButton_add1ButtonClicked), NULL, this);
    button_delete1->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnButton_delete1ButtonClicked), NULL, this);
    button_rename2->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnButton_rename2ButtonClicked), NULL, this);
    button_add2->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnButton_add2ButtonClicked), NULL, this);
    button_delete2->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnButton_delete2ButtonClicked), NULL, this);
    button_rename3->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnButton_rename3ButtonClicked), NULL, this);
    button_add3->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnButton_add3ButtonClicked), NULL, this);
    button_delete3->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnButton_delete3ButtonClicked), NULL, this);
    button_back->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnButton_backButtonClicked), NULL, this);
    button_forward->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::OnButton_forwardButtonClicked), NULL, this);
    
}

DiaryHomeBase::DiaryHomeBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer44 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer44->SetFlexibleDirection( wxBOTH );
    flexGridSizer44->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    this->SetSizer(flexGridSizer44);
    
    wxBoxSizer* boxSizer54 = new wxBoxSizer(wxVERTICAL);
    
    flexGridSizer44->Add(boxSizer54, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    button_addBoard = new wxButton(this, wxID_ANY, _("Aggiungi bacheca..."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer54->Add(button_addBoard, 0, wxALL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer57 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer57->SetFlexibleDirection( wxBOTH );
    flexGridSizer57->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer44->Add(flexGridSizer57, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString selecterArr;
    selecter = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), selecterArr, 0);
    
    flexGridSizer57->Add(selecter, 0, wxALL, WXC_FROM_DIP(5));
    
    button_accept = new wxButton(this, wxID_ANY, _("Accetta"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    button_accept->SetDefault();
    button_accept->SetFocus();
    
    flexGridSizer57->Add(button_accept, 0, wxALL, WXC_FROM_DIP(5));
    
    SetName(wxT("DiaryHomeBase"));
    SetSize(wxDLG_UNIT(this, wxSize(500,300)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    button_addBoard->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(DiaryHomeBase::OnButton_addboardButtonClicked), NULL, this);
    button_accept->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(DiaryHomeBase::OnButton_acceptButtonClicked), NULL, this);
    
}

DiaryHomeBase::~DiaryHomeBase()
{
    button_addBoard->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(DiaryHomeBase::OnButton_addboardButtonClicked), NULL, this);
    button_accept->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(DiaryHomeBase::OnButton_acceptButtonClicked), NULL, this);
    
}

NewBoardBase::NewBoardBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer63 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer63->SetFlexibleDirection( wxBOTH );
    flexGridSizer63->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    this->SetSizer(flexGridSizer63);
    
    m_staticText69 = new wxStaticText(this, wxID_ANY, _("Nome:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer63->Add(m_staticText69, 0, wxALL, WXC_FROM_DIP(5));
    
    text_boardName = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    text_boardName->SetHint(wxT(""));
    #endif
    
    flexGridSizer63->Add(text_boardName, 0, wxALL, WXC_FROM_DIP(5));
    
    button_addBoard = new wxButton(this, wxID_ANY, _("Crea..."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    button_addBoard->SetDefault();
    button_addBoard->SetFocus();
    
    flexGridSizer63->Add(button_addBoard, 0, wxALL, WXC_FROM_DIP(5));
    
    SetName(wxT("NewBoardBase"));
    SetSize(wxDLG_UNIT(this, wxSize(500,300)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    button_addBoard->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(NewBoardBase::OnButton_addboardButtonClicked), NULL, this);
    
}

NewBoardBase::~NewBoardBase()
{
    button_addBoard->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(NewBoardBase::OnButton_addboardButtonClicked), NULL, this);
    
}

AddActivityBase::AddActivityBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer103 = new wxFlexGridSizer(4, 2, 0, 0);
    flexGridSizer103->SetFlexibleDirection( wxBOTH );
    flexGridSizer103->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    this->SetSizer(flexGridSizer103);
    
    Titolo = new wxStaticText(this, wxID_ANY, _("Titolo"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer103->Add(Titolo, 0, wxALL, WXC_FROM_DIP(5));
    
    text_title = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    text_title->SetHint(wxT(""));
    #endif
    
    flexGridSizer103->Add(text_title, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText109 = new wxStaticText(this, wxID_ANY, _("Descrizione"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer103->Add(m_staticText109, 0, wxALL, WXC_FROM_DIP(5));
    
    text_description = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    text_description->SetHint(wxT(""));
    #endif
    
    flexGridSizer103->Add(text_description, 0, wxALL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer121 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer121->SetFlexibleDirection( wxBOTH );
    flexGridSizer121->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer103->Add(flexGridSizer121, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText113 = new wxStaticText(this, wxID_ANY, _("Scadenza"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer121->Add(m_staticText113, 0, wxALL, WXC_FROM_DIP(5));
    
    check_deadline = new wxCheckBox(this, wxID_ANY, _("Ha scadenza"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    check_deadline->SetValue(false);
    
    flexGridSizer121->Add(check_deadline, 0, wxALL, WXC_FROM_DIP(5));
    
    calendar = new wxCalendarCtrl(this, wxID_ANY, wxDefaultDateTime, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxCAL_SHOW_HOLIDAYS);
    calendar->Enable(false);
    
    flexGridSizer103->Add(calendar, 0, wxALL, WXC_FROM_DIP(5));
    
    buttom_confirm = new wxButton(this, wxID_ANY, _("Conferma"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer103->Add(buttom_confirm, 0, wxALL, WXC_FROM_DIP(5));
    
    SetName(wxT("AddActivityBase"));
    SetSize(wxDLG_UNIT(this, wxSize(500,300)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    check_deadline->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(AddActivityBase::OnCheck_deadlineCheckboxClicked), NULL, this);
    buttom_confirm->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(AddActivityBase::OnButtoconfirmButtonClicked), NULL, this);
    
}

AddActivityBase::~AddActivityBase()
{
    check_deadline->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(AddActivityBase::OnCheck_deadlineCheckboxClicked), NULL, this);
    buttom_confirm->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(AddActivityBase::OnButtoconfirmButtonClicked), NULL, this);
    
}

ActivityDetailsBase::ActivityDetailsBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer127 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer127->SetFlexibleDirection( wxBOTH );
    flexGridSizer127->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer127->AddGrowableCol(0);
    flexGridSizer127->AddGrowableCol(1);
    flexGridSizer127->AddGrowableRow(0);
    this->SetSizer(flexGridSizer127);
    
    wxBoxSizer* boxSizer129 = new wxBoxSizer(wxVERTICAL);
    
    flexGridSizer127->Add(boxSizer129, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer131 = new wxFlexGridSizer(4, 2, 0, 0);
    flexGridSizer131->SetFlexibleDirection( wxBOTH );
    flexGridSizer131->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    boxSizer129->Add(flexGridSizer131, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText133 = new wxStaticText(this, wxID_ANY, _("Titolo"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer131->Add(m_staticText133, 0, wxALL, WXC_FROM_DIP(5));
    
    text_title = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    text_title->Enable(false);
    #if wxVERSION_NUMBER >= 3000
    text_title->SetHint(wxT(""));
    #endif
    
    flexGridSizer131->Add(text_title, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText137 = new wxStaticText(this, wxID_ANY, _("Descrizione"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer131->Add(m_staticText137, 0, wxALL, WXC_FROM_DIP(5));
    
    text_description = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    text_description->Enable(false);
    #if wxVERSION_NUMBER >= 3000
    text_description->SetHint(wxT(""));
    #endif
    
    flexGridSizer131->Add(text_description, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText141 = new wxStaticText(this, wxID_ANY, _("Scadenza"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer131->Add(m_staticText141, 0, wxALL, WXC_FROM_DIP(5));
    
    calendar_modify = new wxCalendarCtrl(this, wxID_ANY, wxDefaultDateTime, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxCAL_SHOW_HOLIDAYS);
    calendar_modify->Enable(false);
    
    flexGridSizer131->Add(calendar_modify, 0, wxALL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer147 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer147->SetFlexibleDirection( wxBOTH );
    flexGridSizer147->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer131->Add(flexGridSizer147, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    check_modify = new wxCheckBox(this, wxID_ANY, _("Modifica"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    check_modify->SetValue(false);
    
    flexGridSizer147->Add(check_modify, 0, wxALL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer180 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer180->SetFlexibleDirection( wxBOTH );
    flexGridSizer180->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer131->Add(flexGridSizer180, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    button_modifyconfirm = new wxButton(this, wxID_ANY, _("Conferma"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    button_modifyconfirm->Enable(false);
    
    flexGridSizer180->Add(button_modifyconfirm, 0, wxALL, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizer153 = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, _("Lista persone")), wxVERTICAL);
    
    boxSizer129->Add(staticBoxSizer153, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer154 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer154->SetFlexibleDirection( wxBOTH );
    flexGridSizer154->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer154->AddGrowableCol(0);
    flexGridSizer154->AddGrowableRow(0);
    
    staticBoxSizer153->Add(flexGridSizer154, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    list_person = new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLC_REPORT);
    
    flexGridSizer154->Add(list_person, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    list_person->InsertColumn(list_person->GetColumnCount(), _("Nome"), wxLIST_FORMAT_LEFT, 200);
    list_person->InsertColumn(list_person->GetColumnCount(), _("Cognome"), wxLIST_FORMAT_LEFT, 200);
    wxBoxSizer* boxSizer163 = new wxBoxSizer(wxVERTICAL);
    
    flexGridSizer154->Add(boxSizer163, 0, wxALL, WXC_FROM_DIP(5));
    
    button_addPerson = new wxButton(this, wxID_ANY, _("Aggiungi persona..."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer163->Add(button_addPerson, 0, wxALL, WXC_FROM_DIP(5));
    
    button_removePerson = new wxButton(this, wxID_ANY, _("Rimuovi persona"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    button_removePerson->Enable(false);
    
    boxSizer163->Add(button_removePerson, 0, wxALL, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizer169 = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, _("Lista sottoattività")), wxVERTICAL);
    
    flexGridSizer127->Add(staticBoxSizer169, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    list_subActivity = new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLC_REPORT);
    
    staticBoxSizer169->Add(list_subActivity, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    list_subActivity->InsertColumn(list_subActivity->GetColumnCount(), _("Titolo"), wxLIST_FORMAT_LEFT, 200);
    list_subActivity->InsertColumn(list_subActivity->GetColumnCount(), _("Descrizione"), wxLIST_FORMAT_LEFT, 200);
    wxFlexGridSizer* flexGridSizer172 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer172->SetFlexibleDirection( wxBOTH );
    flexGridSizer172->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    staticBoxSizer169->Add(flexGridSizer172, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    buttom_addSubActivity = new wxButton(this, wxID_ANY, _("Aggiungi sottoattività..."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer172->Add(buttom_addSubActivity, 0, wxALL, WXC_FROM_DIP(5));
    
    button_removeSubActivity = new wxButton(this, wxID_ANY, _("Rimuovi sottoattività"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    button_removeSubActivity->Enable(false);
    
    flexGridSizer172->Add(button_removeSubActivity, 0, wxALL, WXC_FROM_DIP(5));
    
    SetName(wxT("ActivityDetailsBase"));
    SetSize(wxDLG_UNIT(this, wxSize(500,300)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    check_modify->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(ActivityDetailsBase::OnCheck_modifyCheckboxClicked), NULL, this);
    button_modifyconfirm->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ActivityDetailsBase::OnButton_modifyconfirmButtonClicked), NULL, this);
    list_person->Connect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(ActivityDetailsBase::OnList_personListItemSelected), NULL, this);
    button_addPerson->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ActivityDetailsBase::OnButton_addpersonButtonClicked), NULL, this);
    button_removePerson->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ActivityDetailsBase::OnButton_removepersonButtonClicked), NULL, this);
    list_subActivity->Connect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(ActivityDetailsBase::OnList_subactivityListItemSelected), NULL, this);
    buttom_addSubActivity->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ActivityDetailsBase::OnButtoaddsubactivityButtonClicked), NULL, this);
    button_removeSubActivity->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ActivityDetailsBase::OnButton_removesubactivityButtonClicked), NULL, this);
    
}

ActivityDetailsBase::~ActivityDetailsBase()
{
    check_modify->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(ActivityDetailsBase::OnCheck_modifyCheckboxClicked), NULL, this);
    button_modifyconfirm->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ActivityDetailsBase::OnButton_modifyconfirmButtonClicked), NULL, this);
    list_person->Disconnect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(ActivityDetailsBase::OnList_personListItemSelected), NULL, this);
    button_addPerson->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ActivityDetailsBase::OnButton_addpersonButtonClicked), NULL, this);
    button_removePerson->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ActivityDetailsBase::OnButton_removepersonButtonClicked), NULL, this);
    list_subActivity->Disconnect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(ActivityDetailsBase::OnList_subactivityListItemSelected), NULL, this);
    buttom_addSubActivity->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ActivityDetailsBase::OnButtoaddsubactivityButtonClicked), NULL, this);
    button_removeSubActivity->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ActivityDetailsBase::OnButton_removesubactivityButtonClicked), NULL, this);
    
}

AddPersonBase::AddPersonBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer184 = new wxFlexGridSizer(3, 2, 0, 0);
    flexGridSizer184->SetFlexibleDirection( wxBOTH );
    flexGridSizer184->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    this->SetSizer(flexGridSizer184);
    
    m_staticText186 = new wxStaticText(this, wxID_ANY, _("Nome"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer184->Add(m_staticText186, 0, wxALL, WXC_FROM_DIP(5));
    
    textFirstName = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    textFirstName->SetHint(wxT(""));
    #endif
    
    flexGridSizer184->Add(textFirstName, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText190 = new wxStaticText(this, wxID_ANY, _("Cognome"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer184->Add(m_staticText190, 0, wxALL, WXC_FROM_DIP(5));
    
    textLastName = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    textLastName->SetHint(wxT(""));
    #endif
    
    flexGridSizer184->Add(textLastName, 0, wxALL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer196 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer196->SetFlexibleDirection( wxBOTH );
    flexGridSizer196->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer184->Add(flexGridSizer196, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    button_confirmPerson = new wxButton(this, wxID_ANY, _("Conferma"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    button_confirmPerson->SetDefault();
    button_confirmPerson->SetFocus();
    
    flexGridSizer184->Add(button_confirmPerson, 0, wxALL, WXC_FROM_DIP(5));
    
    SetName(wxT("AddPersonBase"));
    SetSize(wxDLG_UNIT(this, wxSize(500,300)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    button_confirmPerson->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(AddPersonBase::OnButton_confirmpersonButtonClicked), NULL, this);
    
}

AddPersonBase::~AddPersonBase()
{
    button_confirmPerson->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(AddPersonBase::OnButton_confirmpersonButtonClicked), NULL, this);
    
}

AddSubActivityBase::AddSubActivityBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer200 = new wxFlexGridSizer(3, 2, 0, 0);
    flexGridSizer200->SetFlexibleDirection( wxBOTH );
    flexGridSizer200->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    this->SetSizer(flexGridSizer200);
    
    m_staticText202 = new wxStaticText(this, wxID_ANY, _("Titolo"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer200->Add(m_staticText202, 0, wxALL, WXC_FROM_DIP(5));
    
    textTitle = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    textTitle->SetHint(wxT(""));
    #endif
    
    flexGridSizer200->Add(textTitle, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText206 = new wxStaticText(this, wxID_ANY, _("Descrizione"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer200->Add(m_staticText206, 0, wxALL, WXC_FROM_DIP(5));
    
    textDescription = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    textDescription->SetHint(wxT(""));
    #endif
    
    flexGridSizer200->Add(textDescription, 0, wxALL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer210 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer210->SetFlexibleDirection( wxBOTH );
    flexGridSizer210->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer200->Add(flexGridSizer210, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    button_confirmSubActivity = new wxButton(this, wxID_ANY, _("Conferma"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    button_confirmSubActivity->SetDefault();
    button_confirmSubActivity->SetFocus();
    
    flexGridSizer200->Add(button_confirmSubActivity, 0, wxALL, WXC_FROM_DIP(5));
    
    SetName(wxT("AddSubActivityBase"));
    SetSize(wxDLG_UNIT(this, wxSize(500,300)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    button_confirmSubActivity->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(AddSubActivityBase::OnButton_confirmsubactivityButtonClicked), NULL, this);
    
}

AddSubActivityBase::~AddSubActivityBase()
{
    button_confirmSubActivity->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(AddSubActivityBase::OnButton_confirmsubactivityButtonClicked), NULL, this);
    
}

AddActivityListBase::AddActivityListBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer216 = new wxFlexGridSizer(2, 2, 0, 0);
    flexGridSizer216->SetFlexibleDirection( wxBOTH );
    flexGridSizer216->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    this->SetSizer(flexGridSizer216);
    
    m_staticText218 = new wxStaticText(this, wxID_ANY, _("Titolo"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer216->Add(m_staticText218, 0, wxALL, WXC_FROM_DIP(5));
    
    textAddActivityList = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    textAddActivityList->SetHint(wxT(""));
    #endif
    
    flexGridSizer216->Add(textAddActivityList, 0, wxALL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer224 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer224->SetFlexibleDirection( wxBOTH );
    flexGridSizer224->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer216->Add(flexGridSizer224, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    buttonConfirm_ActivityList = new wxButton(this, wxID_ANY, _("Conferma"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    buttonConfirm_ActivityList->SetDefault();
    buttonConfirm_ActivityList->SetFocus();
    
    flexGridSizer216->Add(buttonConfirm_ActivityList, 0, wxALL, WXC_FROM_DIP(5));
    
    SetName(wxT("AddActivityListBase"));
    SetSize(wxDLG_UNIT(this, wxSize(500,300)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    buttonConfirm_ActivityList->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(AddActivityListBase::OnButtonConfirmActivityListButtonClicked), NULL, this);
    
}

AddActivityListBase::~AddActivityListBase()
{
    buttonConfirm_ActivityList->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(AddActivityListBase::OnButtonConfirmActivityListButtonClicked), NULL, this);
    
}
